#!/bin/bash
# kex_q is a modified version of k-alias's 'kex' command, that allows you to add a quoted argument.
# Many applications need quoted arguments to work. This function was inspired by gitlab-rails runner
# single line commands but could be useful for 'jq' and others. It's designed to allow positional and 
# flag arguments to be used in any order however the quoted argument will always be last. 
#
# TODO:
# Allow multiple -q flags
# When mixed arguments are present retain -q position. 
function kex_q() {
  usage() { echo "kex_q: pod [shell <sh|bash>] commands [-q <string>]" 1>&2; exit; }
  command=""
  declare -a ARGS=()
  
  if [ -z "$1" ]; then
    kubectl get pod
    exit
  fi  
  
  while [ $OPTIND -le "$#" ]; do

    if getopts ':q:' opt; then
      case "$opt" in
        q) command="$OPTARG" ;;
        *) usage ;;
      esac
    else
      ARGS+=("${!OPTIND}")
      ((OPTIND++))
    fi
  done

  echo "command: $command"
  echo "ARGS: ${ARGS[@]}"

  target=${ARGS[0]%:*}
  container=${ARGS[0]##*:}
  if [ "$target" == "$container" ]; then container=""; fi
  ARGS=("${ARGS[@]:1}")
  echo "${ARGS[@]}"

  pod=`kubectl get pod | grep $target | head -n1 | awk '{print $1}'`

  if [ -z "$pod" ]; then
    echo no pod found.
    exit
  fi
  
  if [[ $ARGS[0] =~ "bash|sh" ]]; then
    sh=${ARGS[0]:-"bash"}
    ARGS=("${ARGS[@]:1}")
  else
    sh="bash"
  fi
  
  echo "${ARGS[@]}"
  if [ -n "$container" ]; then
    kubectl exec --stdin --tty $pod  -c $container -- $sh ${ARGS[@]} "${command[@]}"
  else
    kubectl exec --stdin --tty $pod -- $sh ${ARGS[@]} "${command[@]}"
  fi
  #Reset so the function can be reused
  OPTIND=1
}

function gen_random() {
  declare -a keys=( \
  TOKEN_SECRET \
  ADMIN_PASS \
  POSTGRES_PASS \
  CRUCIBLE_ADMIN_PASS \
  STACKSTORM_MONGO_PASS \
  STACKSTORM_MONGO_KEY \
  STACKSTORM_RABBITMQ_PASS \
  STACKSTORM_RABBITMQ_COOKIE \
  TOPOMOJO_PASS \
  MOODLE_PASSWORD \
  MOODLE_MARIADB_PASSWORD \
  ROOT_MARIA_DB_PASSWORD \
  RANCHER_PASS \
  GITEA_OAUTH_CLIENT_SECRET \
  IDENTITY_CLIENTSECRET \
  )
for key in  "${keys[@]}";
do
  echo "Setting $key"
  sed -i -e "s/$key=.*/$key=$(date +%s | sha256sum | base64 | head -c 24 ; echo)/" env
  sleep 1
done 
}
